{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","components/App.js","reportWebVitals.js","index.js"],"names":["Header","Footer","year","Date","getFullYear","mic","window","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","lang","App","useState","isListening","setIsListening","note","setNote","savedNotes","setSavedNotes","useEffect","start","onend","console","log","stop","onstart","onresult","event","transcript","Array","from","results","map","result","join","onerror","error","className","n","onClick","prevState","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4LAaeA,MAVf,WACE,OACE,iCACE,+BACE,cAAC,IAAD,IADF,4BCKSC,MATf,WACE,IAAMC,GAAO,IAAIC,MAAOC,cACxB,OACE,iCACE,kDAAgBF,QCChBG,EAAM,IADcC,OAAOC,mBAAqBD,OAAOE,yBAG7DH,EAAII,YAAa,EACjBJ,EAAIK,gBAAiB,EACrBL,EAAIM,KAAO,QA+GIC,MAzGf,WAAgB,IAAD,EACyBC,oBAAS,GADlC,mBACNC,EADM,KACOC,EADP,OAEWF,mBAAS,MAFpB,mBAENG,EAFM,KAEAC,EAFA,OAGuBJ,mBAAS,IAHhC,mBAGNK,EAHM,KAGMC,EAHN,KAyEb,OApEAC,qBAAU,WAEFN,GACFT,EAAIgB,QACJhB,EAAIiB,MAAQ,WACVC,QAAQC,IAAI,cACZnB,EAAIgB,WAGNhB,EAAIoB,OACJpB,EAAIiB,MAAQ,WACVC,QAAQC,IAAI,0BAGhBnB,EAAIqB,QAAU,WACZH,QAAQC,IAAI,YAGdnB,EAAIsB,SAAW,SAAAC,GACb,IAAMC,EAAaC,MAAMC,KAAKH,EAAMI,SACjCC,KAAI,SAAAC,GAAM,OAAIA,EAAO,MACrBD,KAAI,SAAAC,GAAM,OAAIA,EAAOL,cACrBM,KAAK,IACRZ,QAAQC,IAAIK,GACZZ,EAAQY,GACRxB,EAAI+B,QAAU,SAAAR,GACZL,QAAQC,IAAII,EAAMS,WAKvB,CAACvB,IAsCF,gCACE,cAAC,EAAD,IACA,qBAAKwB,UAAU,cAAf,SACE,yDAEF,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,MAAf,UACA,8CACGxB,EAAc,sDAAmB,kEAClC,4BAAIE,OAEN,sBAAKsB,UAAU,MAAf,UACE,uCACCpB,EAAWe,KAAI,SAAAM,GAAC,OACf,4BAAYA,GAAJA,YAId,sBAAKD,UAAU,aAAf,UACE,wBAAQE,QAAS,kBAAMzB,GAAe,SAAA0B,GAAS,OAAKA,MAApD,wBAGA,wBAAQD,QA5BS,WACrBrB,EAAc,GAAD,mBAAKD,GAAL,CAAiBF,KAC9BC,EAAQ,KA0B6ByB,UAAW1B,EAA5C,0BAIF,cAAC,EAAD,QCzGS2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e074b6ce.chunk.js","sourcesContent":["import React from \"react\";\r\nimport MicIcon from '@material-ui/icons/Mic';\r\n\r\nfunction Header() {\r\n  return (\r\n    <header>\r\n      <h1>\r\n        <MicIcon /> Speech Idea Keeper \r\n      </h1>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nfunction Footer() {\r\n  const year = new Date().getFullYear();\r\n  return (\r\n    <footer>\r\n      <p>Copyright ‚ìí {year}</p>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React, {useState , useEffect} from 'react';\r\n// import './App.css';\r\nimport Header from \"./Header\";\r\nimport Footer from \"./Footer\";\r\n\r\n\r\nconst SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition \r\nconst mic = new SpeechRecognition()\r\n\r\nmic.continuous = true\r\nmic.interimResults = true\r\nmic.lang = 'en-US'\r\n\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n  const [isListening, setIsListening] = useState(false)\r\n  const [note, setNote] = useState(null)\r\n  const [savedNotes, setSavedNotes] = useState([])\r\n\r\n  useEffect(() => {\r\n    const handleListen = () => {\r\n      if (isListening) {\r\n        mic.start()\r\n        mic.onend = () => {\r\n          console.log('continue..')\r\n          mic.start()\r\n        }\r\n      } else {\r\n        mic.stop()\r\n        mic.onend = () => {\r\n          console.log('Stopped Mic on Click')\r\n        }\r\n      }\r\n      mic.onstart = () => {\r\n        console.log('Mics on')\r\n      }\r\n  \r\n      mic.onresult = event => {\r\n        const transcript = Array.from(event.results)\r\n          .map(result => result[0])\r\n          .map(result => result.transcript)\r\n          .join('')\r\n        console.log(transcript)\r\n        setNote(transcript)\r\n        mic.onerror = event => {\r\n          console.log(event.error)\r\n        }\r\n      }\r\n    }\r\n    handleListen();\r\n  }, [isListening])\r\n\r\n  // const handleListen = () => {\r\n  //   if (isListening) {\r\n  //     mic.start()\r\n  //     mic.onend = () => {\r\n  //       console.log('continue..')\r\n  //       mic.start()\r\n  //     }\r\n  //   } else {\r\n  //     mic.stop()\r\n  //     mic.onend = () => {\r\n  //       console.log('Stopped Mic on Click')\r\n  //     }\r\n  //   }\r\n  //   mic.onstart = () => {\r\n  //     console.log('Mics on')\r\n  //   }\r\n\r\n  //   mic.onresult = event => {\r\n  //     const transcript = Array.from(event.results)\r\n  //       .map(result => result[0])\r\n  //       .map(result => result.transcript)\r\n  //       .join('')\r\n  //     console.log(transcript)\r\n  //     setNote(transcript)\r\n  //     mic.onerror = event => {\r\n  //       console.log(event.error)\r\n  //     }\r\n  //   }\r\n  // }\r\n\r\n  const handleSaveNote = () => {\r\n    setSavedNotes([...savedNotes, note])\r\n    setNote('')\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <div className=\"containerH2\">\r\n        <h2> This Works in Chrome</h2>\r\n      </div>\r\n      <div className=\"container\">\r\n        <div className=\"box\">\r\n        <h2>Current Note</h2>\r\n          {isListening ? <span>üéôÔ∏è</span> : <span>üõëüéôÔ∏è</span>}\r\n          <p>{note}</p>\r\n        </div>\r\n        <div className=\"box\">\r\n          <h2>Notes</h2>\r\n          {savedNotes.map(n => (\r\n            <p key={n}>{n}</p>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <div className=\"box-button\">\r\n        <button onClick={() => setIsListening(prevState => !prevState)}>\r\n          Start/Stop\r\n        </button>\r\n        <button onClick={handleSaveNote} disabled={!note}>\r\n          Save Note\r\n        </button>\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// import './components/index.css';\r\nimport App from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}